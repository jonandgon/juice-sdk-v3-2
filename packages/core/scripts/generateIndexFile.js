const fs = require('fs');
const path = require('path');

const CONTRACTS = [
  'JBETHPaymentTerminal',
  'JBSingleTokenPaymentTerminalStore',
  'JBController',
  'JBFundingCycleStore',
  'JBSplitsStore',
  'JBCurrencies',
  'JBOperatorStore',
  'JBTokenStore',
  'JBDirectory',
  'JBPrices',
  'JBETHERC20ProjectPayerDeployer',
  'JBProjects',
  'JBChainlinkV3PriceFeed',
  'JBETHERC20SplitsPayerDeployer',
  'JB1DayReconfigurationBufferBallot',
  'JB3DayReconfigurationBufferBallot',
  'JB7DayReconfigurationBufferBallot',
];

const generateFileHead = imports => `/**
* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
*/
import { Provider } from '@ethersproject/abstract-provider';
import { Signer } from '@ethersproject/abstract-signer';
import { Contract } from '@ethersproject/contracts';
${imports}
type SignerOrProvider = Signer | Provider;`;

const IMPORTS =
  CONTRACTS.map(
    contractName => `import {
  abi as ${contractName}ABI_mainnet,
  address as ${contractName}Address_mainnet,
} from '@jbx-protocol/juice-contracts-v3/deployments/mainnet/${contractName}.json';`,
  ).join('\n') +
  CONTRACTS.map(
    contractName => `import {
    abi as ${contractName}ABI_goerli,
    address as ${contractName}Address_goerli,
  } from '@jbx-protocol/juice-contracts-v3/deployments/goerli/${contractName}.json';`,
  ).join('\n') +
  '\n' +
  `import {
    ${CONTRACTS.join(',\n')}
  } from './types/contracts';\n` +
  `export type {
    ${CONTRACTS.join(',\n')}
  } from './types/contracts';\n`;

const HEAD = generateFileHead(IMPORTS);

const contents =
  HEAD +
  '\n' +
  CONTRACTS.map(
    contractName => `export const get${contractName} = (signerOrProvider: SignerOrProvider, { network } : { network: 'mainnet' | 'goerli' } = { network: 'mainnet' }) =>
new Contract(
  network === 'goerli' ? ${contractName}Address_goerli : ${contractName}Address_mainnet,
  network === 'goerli' ? ${contractName}ABI_goerli : ${contractName}ABI_mainnet,
  signerOrProvider,
) as unknown as Contract as ${contractName};`,
  ).join('\n');

const createIndexTsFile = () => {
  const filepath = path.resolve(__dirname, `../src/index.ts`);

  fs.writeFileSync(filepath, contents, { flag: 'w' });
};

createIndexTsFile();

console.log('done.');
